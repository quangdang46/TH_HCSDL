USE master
GO

IF EXISTS(SELECT * FROM SYSDATABASES WHERE NAME='QLSV')
DROP DATABASE QLSV
GO

CREATE DATABASE QLSV
GO

USE QLSV
GO


IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='DEPARTMENT')
DROP TABLE DEPARTMENT
GO

CREATE TABLE DEPARTMENT(
	DID VARCHAR(30) PRIMARY KEY,
	DNAME VARCHAR(30),
	DYEAR INT,
)
GO

IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='STUDENT')
DROP TABLE STUDENT
GO

CREATE TABLE STUDENT (
	SID VARCHAR(30) PRIMARY KEY,
	NAME NVARCHAR(30) NOT NULL,
	BIRTHDAY DATE,
	DID VARCHAR(30),
	FOREIGN KEY (DID) REFERENCES DEPARTMENT(DID),
)

GO

IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='COURSES')
DROP TABLE COURSES
GO

CREATE TABLE COURSES (
	CID VARCHAR(30) PRIMARY KEY,
	CNAME VARCHAR(30),
	CREDIT INT,
	DID VARCHAR(30),
	FOREIGN KEY (DID) REFERENCES DEPARTMENT(DID),
)

GO

IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='CONDITION')
DROP TABLE CONDITION
GO

CREATE TABLE CONDITION (
	CID VARCHAR(30),
	PRECID VARCHAR(30),
	PRIMARY KEY (CID ,PRECID),
	FOREIGN KEY (CID) REFERENCES COURSES(CID),
	FOREIGN KEY (PRECID) REFERENCES COURSES(CID),
)

GO

IF EXISTS(SELECT * FROM SYSOBJECTS WHERE NAME='RESULTS')
DROP TABLE RESULTS
GO

CREATE TABLE RESULTS (
	SID VARCHAR(30),
	CID VARCHAR(30),
	SCORE FLOAT,
	--PRIMARY KEY(SID,CID),
	FOREIGN KEY (CID) REFERENCES COURSES(CID),
	FOREIGN KEY (SID) REFERENCES STUDENT(SID),
)
-- LAB 2
--P1
-- DEPARTMENT
INSERT INTO DBO.DEPARTMENT VALUES('IT','Information Technology',2012)
INSERT INTO DBO.DEPARTMENT VALUES('ET','Electronic Technology',1997)
INSERT INTO DBO.DEPARTMENT VALUES('BT','Biotechnology',1997)
INSERT INTO DBO.DEPARTMENT VALUES('FL','Foreign language',2000)
INSERT INTO DBO.DEPARTMENT VALUES('CT','Chemical Technology',2011)

SELECT * FROM DBO.DEPARTMENT
--STUDENT
INSERT INTO DBO.STUDENT VALUES('S01',N'Phước Trần','1990-02-24','IT')
INSERT INTO DBO.STUDENT VALUES('S02',N'Timothy','2000-12-12','IT')
INSERT INTO DBO.STUDENT VALUES('S03',N'Kaily','2001-10-01','ET')
INSERT INTO DBO.STUDENT VALUES('S04',N'Tâm Nguyễn','1998-12-20','ET')
INSERT INTO DBO.STUDENT VALUES('S05',N'Lee Nguyễn','1999-02-28','BT')

SELECT * FROM DBO.STUDENT

--COURSES
INSERT INTO DBO.COURSES VALUES('OOP','Object oriented Programming',4,'IT')
INSERT INTO DBO.COURSES VALUES('PM','Programming method',4,'IT')
INSERT INTO DBO.COURSES VALUES('DBS','Database system',4,'IT')
INSERT INTO DBO.COURSES VALUES('SE','Software engineering',4,'IT')
INSERT INTO DBO.COURSES VALUES('CN','Computer network',3,'IT')

SELECT * FROM DBO.COURSES

--CONDITION
INSERT INTO DBO.CONDITION VALUES('OOP','PM')
INSERT INTO DBO.CONDITION VALUES('DBS','PM')
INSERT INTO DBO.CONDITION VALUES('DBS','OOP')
INSERT INTO DBO.CONDITION VALUES('SE','OOP')
INSERT INTO DBO.CONDITION VALUES('SE','DBS')

SELECT * FROM DBO.CONDITION

--RESULTS

INSERT INTO DBO.RESULTS VALUES('S01','PM',9.5)
INSERT INTO DBO.RESULTS VALUES('S01','OOP',10)
INSERT INTO DBO.RESULTS VALUES('S02','PM',4.5)
INSERT INTO DBO.RESULTS VALUES('S02','DBS',6)
INSERT INTO DBO.RESULTS VALUES('S03','DBS',8)

SELECT * FROM DBO.RESULTS

--4.1

SELECT DNAME
FROM DEPARTMENT AS D 
WHERE D.DID NOT IN (
	SELECT S.DID FROM STUDENT AS S
)
--4.2
SELECT DNAME FROM DEPARTMENT
WHERE DID NOT IN (
	SELECT DID FROM COURSES
)
--4.3
SELECT CNAME FROM COURSES
WHERE CNAME NOT IN(
	SELECT CNAME FROM RESULTS AS R,COURSES AS C
	WHERE R.CID=C.CID
)
--4.4
SELECT NAME FROM STUDENT
WHERE SID NOT IN(
	SELECT R.SID FROM STUDENT AS S,RESULTS AS R
	WHERE R.SID=S.SID
)
--4.5
SELECT NAME FROM RESULTS AS R,STUDENT AS S
WHERE S.SID=R.SID
GROUP BY R.SID,NAME
HAVING AVG(SCORE)<5

--4.6
SELECT NAME FROM RESULTS AS R,STUDENT AS S
WHERE R.SID=S.SID
GROUP BY NAME,R.SID
HAVING AVG(SCORE)>=ALL(
	SELECT AVG(SCORE)
	FROM RESULTS
	GROUP BY SID
)

--4.7
SELECT CNAME
FROM COURSES AS C,RESULTS AS R
WHERE C.CID=R.CID
GROUP BY CNAME,R.CID
HAVING COUNT(R.SID)>=ALL(
	SELECT COUNT(SID) FROM RESULTS
	GROUP BY CID
)
--4.8
SELECT CNAME
FROM COURSES AS C,RESULTS AS R
WHERE C.CID=R.CID
GROUP BY CNAME,R.CID
HAVING COUNT(R.SID)<5
--4.9
SELECT CNAME
FROM COURSES AS C,RESULTS AS R
WHERE C.CID=R.CID
GROUP BY CNAME,R.CID
HAVING COUNT(R.SID)>=2
--4.10
SELECT DNAME
FROM DEPARTMENT AS D,STUDENT AS S,RESULTS AS R
WHERE D.DID=S.DID AND S.SID=R.SID
GROUP BY DNAME,D.DID
HAVING AVG(SCORE)>=ALL(
	SELECT AVG(SCORE)
	FROM DEPARTMENT AS D,STUDENT AS S,RESULTS AS R
	WHERE D.DID=S.DID AND S.SID=R.SID
	GROUP BY D.DID
)
--4.11
UPDATE RESULTS SET SCORE+=1
WHERE RESULTS.SID IN(
	SELECT SID FROM DEPARTMENT AS D,STUDENT AS S
	WHERE S.DID=S.DID AND S.DID='IT'
)
SELECT * FROM RESULTS
--4.12
GO
UPDATE RESULTS SET SCORE=(
	CASE WHEN SCORE>10 THEN 10 ELSE SCORE+1 END
)
WHERE RESULTS.SID IN(
	SELECT SID FROM DEPARTMENT AS D,STUDENT AS S
	WHERE S.DID=S.DID AND S.DID='IT'
)
SELECT * FROM RESULTS
--4.13
GO
SELECT NAME
FROM STUDENT AS S,RESULTS AS R
WHERE S.SID=R.SID
GROUP BY R.SID,NAME,BIRTHDAY
ORDER BY AVG(SCORE) DESC,DAY(BIRTHDAY) ASC
--4.14
SELECT CNAME FROM COURSES AS C,RESULTS AS R
WHERE C.CID=R.CID
GROUP BY CNAME,R.CID
HAVING AVG(SCORE)>=ALL(
	SELECT AVG(SCORE) FROM RESULTS AS R,STUDENT AS S
	WHERE S.SID=R.SID AND S.DID='IT'
	GROUP BY R.CID
)
--4.15
SELECT NAME FROM STUDENT AS S,RESULTS AS R
WHERE S.SID=R.SID AND S.DID='IT'
GROUP BY R.SID,NAME
HAVING AVG(SCORE)<ALL(
	SELECT AVG(SCORE) FROM RESULTS AS R,STUDENT AS S
	WHERE S.SID=R.SID AND S.DID='IT'
	GROUP BY R.SID
)

--4.16
SELECT NAME FROM STUDENT AS S,RESULTS AS R
WHERE NAME LIKE N'%NGUYEN%' AND YEAR(GETDATE())-YEAR(BIRTHDAY)<20 AND S.SID=R.SID
GROUP BY R.SID,NAME
HAVING AVG(SCORE)>=5


